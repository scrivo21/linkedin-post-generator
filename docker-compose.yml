version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: linkedin_posts
      POSTGRES_USER: linkedin_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-linkedin_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkedin_user -d linkedin_posts"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Discord Bot Application
  linkedin-bot:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database
      DATABASE_URL: postgresql://linkedin_user:${DB_PASSWORD:-linkedin_password}@db:5432/linkedin_posts
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: linkedin_posts
      DB_USER: linkedin_user
      DB_PASSWORD: ${DB_PASSWORD:-linkedin_password}
      
      # Discord Configuration
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      DISCORD_APPROVAL_CHANNEL_ID: ${DISCORD_APPROVAL_CHANNEL_ID}
      DISCORD_NOTIFICATION_CHANNEL_ID: ${DISCORD_NOTIFICATION_CHANNEL_ID:-}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID:-}
      BOT_PREFIX: ${BOT_PREFIX:-!}
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}
      
      # LinkedIn Configuration
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      LINKEDIN_ACCESS_TOKEN: ${LINKEDIN_ACCESS_TOKEN}
      LINKEDIN_PERSON_ID: ${LINKEDIN_PERSON_ID:-}
      
      # Optional Integrations
      N8N_WEBHOOK_URL: ${N8N_WEBHOOK_URL:-}
      
      # Monitoring
      POLL_INTERVAL: ${POLL_INTERVAL:-30}
      
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./generated_images:/app/generated_images
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis (for future caching and task queue)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - full  # Only start with --profile full

  # Nginx (for future web interface)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - linkedin-bot
    restart: unless-stopped
    profiles:
      - web  # Only start with --profile web

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge